//
//Copyright 2016-2099 Ailemon.net
//
//This file is part of Golang SDK ASRT Speech Recognition Tool.
//
//ASRT is free software: you can redistribute it and/or modify
//it under the terms of the GNU General Public License as published by
//the Free Software Foundation, either version 3 of the License, or
//(at your option) any later version.
//ASRT is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with ASRT.  If not, see <https://www.gnu.org/licenses/>.
//=====================================================================

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.1
// source: grpc/asrt.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SpeechRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WavData *WavData `protobuf:"bytes,1,opt,name=wav_data,json=wavData,proto3" json:"wav_data,omitempty"`
}

func (x *SpeechRequest) Reset() {
	*x = SpeechRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_asrt_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeechRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeechRequest) ProtoMessage() {}

func (x *SpeechRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_asrt_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeechRequest.ProtoReflect.Descriptor instead.
func (*SpeechRequest) Descriptor() ([]byte, []int) {
	return file_grpc_asrt_proto_rawDescGZIP(), []int{0}
}

func (x *SpeechRequest) GetWavData() *WavData {
	if x != nil {
		return x.WavData
	}
	return nil
}

type SpeechResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode    int32    `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMessage string   `protobuf:"bytes,2,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	ResultData    []string `protobuf:"bytes,3,rep,name=result_data,json=resultData,proto3" json:"result_data,omitempty"` // 拼音结果
}

func (x *SpeechResponse) Reset() {
	*x = SpeechResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_asrt_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeechResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeechResponse) ProtoMessage() {}

func (x *SpeechResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_asrt_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeechResponse.ProtoReflect.Descriptor instead.
func (*SpeechResponse) Descriptor() ([]byte, []int) {
	return file_grpc_asrt_proto_rawDescGZIP(), []int{1}
}

func (x *SpeechResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *SpeechResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *SpeechResponse) GetResultData() []string {
	if x != nil {
		return x.ResultData
	}
	return nil
}

type LanguageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pinyins []string `protobuf:"bytes,1,rep,name=pinyins,proto3" json:"pinyins,omitempty"`
}

func (x *LanguageRequest) Reset() {
	*x = LanguageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_asrt_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanguageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanguageRequest) ProtoMessage() {}

func (x *LanguageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_asrt_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanguageRequest.ProtoReflect.Descriptor instead.
func (*LanguageRequest) Descriptor() ([]byte, []int) {
	return file_grpc_asrt_proto_rawDescGZIP(), []int{2}
}

func (x *LanguageRequest) GetPinyins() []string {
	if x != nil {
		return x.Pinyins
	}
	return nil
}

type TextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode    int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMessage string `protobuf:"bytes,2,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	TextResult    string `protobuf:"bytes,3,opt,name=text_result,json=textResult,proto3" json:"text_result,omitempty"`
}

func (x *TextResponse) Reset() {
	*x = TextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_asrt_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextResponse) ProtoMessage() {}

func (x *TextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_asrt_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextResponse.ProtoReflect.Descriptor instead.
func (*TextResponse) Descriptor() ([]byte, []int) {
	return file_grpc_asrt_proto_rawDescGZIP(), []int{3}
}

func (x *TextResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *TextResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *TextResponse) GetTextResult() string {
	if x != nil {
		return x.TextResult
	}
	return ""
}

type WavData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Samples    []byte `protobuf:"bytes,1,opt,name=samples,proto3" json:"samples,omitempty"`                          // wav样本点字节
	SampleRate int32  `protobuf:"varint,2,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"` // wav采样率
	Channels   int32  `protobuf:"varint,3,opt,name=channels,proto3" json:"channels,omitempty"`                       // wav通道数
	ByteWidth  int32  `protobuf:"varint,4,opt,name=byte_width,json=byteWidth,proto3" json:"byte_width,omitempty"`    // wav样本字节宽度
}

func (x *WavData) Reset() {
	*x = WavData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_asrt_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WavData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WavData) ProtoMessage() {}

func (x *WavData) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_asrt_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WavData.ProtoReflect.Descriptor instead.
func (*WavData) Descriptor() ([]byte, []int) {
	return file_grpc_asrt_proto_rawDescGZIP(), []int{4}
}

func (x *WavData) GetSamples() []byte {
	if x != nil {
		return x.Samples
	}
	return nil
}

func (x *WavData) GetSampleRate() int32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *WavData) GetChannels() int32 {
	if x != nil {
		return x.Channels
	}
	return 0
}

func (x *WavData) GetByteWidth() int32 {
	if x != nil {
		return x.ByteWidth
	}
	return 0
}

var File_grpc_asrt_proto protoreflect.FileDescriptor

var file_grpc_asrt_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x73, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x61, 0x73, 0x72, 0x74, 0x22, 0x39, 0x0a, 0x0d, 0x53, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x77, 0x61, 0x76, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x72,
	0x74, 0x2e, 0x57, 0x61, 0x76, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x77, 0x61, 0x76, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x79, 0x0a, 0x0e, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x2b, 0x0a,
	0x0f, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x73, 0x22, 0x77, 0x0a, 0x0c, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x7f, 0x0a, 0x07, 0x57, 0x61, 0x76, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x32, 0xec, 0x01, 0x0a, 0x0f, 0x41, 0x73, 0x72, 0x74, 0x47, 0x72, 0x70,
	0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x53, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x12, 0x13, 0x2e, 0x61, 0x73, 0x72, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x73, 0x72, 0x74, 0x2e, 0x53,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x37, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x15, 0x2e, 0x61, 0x73,
	0x72, 0x74, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x61, 0x73, 0x72, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x12,
	0x13, 0x2e, 0x61, 0x73, 0x72, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x61, 0x73, 0x72, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x06, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x13, 0x2e, 0x61, 0x73, 0x72, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x61, 0x73, 0x72, 0x74,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grpc_asrt_proto_rawDescOnce sync.Once
	file_grpc_asrt_proto_rawDescData = file_grpc_asrt_proto_rawDesc
)

func file_grpc_asrt_proto_rawDescGZIP() []byte {
	file_grpc_asrt_proto_rawDescOnce.Do(func() {
		file_grpc_asrt_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_asrt_proto_rawDescData)
	})
	return file_grpc_asrt_proto_rawDescData
}

var file_grpc_asrt_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_grpc_asrt_proto_goTypes = []interface{}{
	(*SpeechRequest)(nil),   // 0: asrt.SpeechRequest
	(*SpeechResponse)(nil),  // 1: asrt.SpeechResponse
	(*LanguageRequest)(nil), // 2: asrt.LanguageRequest
	(*TextResponse)(nil),    // 3: asrt.TextResponse
	(*WavData)(nil),         // 4: asrt.WavData
}
var file_grpc_asrt_proto_depIdxs = []int32{
	4, // 0: asrt.SpeechRequest.wav_data:type_name -> asrt.WavData
	0, // 1: asrt.AsrtGrpcService.Speech:input_type -> asrt.SpeechRequest
	2, // 2: asrt.AsrtGrpcService.Language:input_type -> asrt.LanguageRequest
	0, // 3: asrt.AsrtGrpcService.All:input_type -> asrt.SpeechRequest
	0, // 4: asrt.AsrtGrpcService.Stream:input_type -> asrt.SpeechRequest
	1, // 5: asrt.AsrtGrpcService.Speech:output_type -> asrt.SpeechResponse
	3, // 6: asrt.AsrtGrpcService.Language:output_type -> asrt.TextResponse
	3, // 7: asrt.AsrtGrpcService.All:output_type -> asrt.TextResponse
	3, // 8: asrt.AsrtGrpcService.Stream:output_type -> asrt.TextResponse
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_grpc_asrt_proto_init() }
func file_grpc_asrt_proto_init() {
	if File_grpc_asrt_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_grpc_asrt_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeechRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_asrt_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeechResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_asrt_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanguageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_asrt_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_asrt_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WavData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_asrt_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grpc_asrt_proto_goTypes,
		DependencyIndexes: file_grpc_asrt_proto_depIdxs,
		MessageInfos:      file_grpc_asrt_proto_msgTypes,
	}.Build()
	File_grpc_asrt_proto = out.File
	file_grpc_asrt_proto_rawDesc = nil
	file_grpc_asrt_proto_goTypes = nil
	file_grpc_asrt_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AsrtGrpcServiceClient is the client API for AsrtGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AsrtGrpcServiceClient interface {
	Speech(ctx context.Context, in *SpeechRequest, opts ...grpc.CallOption) (*SpeechResponse, error)
	Language(ctx context.Context, in *LanguageRequest, opts ...grpc.CallOption) (*TextResponse, error)
	All(ctx context.Context, in *SpeechRequest, opts ...grpc.CallOption) (*TextResponse, error)
	Stream(ctx context.Context, opts ...grpc.CallOption) (AsrtGrpcService_StreamClient, error)
}

type asrtGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAsrtGrpcServiceClient(cc grpc.ClientConnInterface) AsrtGrpcServiceClient {
	return &asrtGrpcServiceClient{cc}
}

func (c *asrtGrpcServiceClient) Speech(ctx context.Context, in *SpeechRequest, opts ...grpc.CallOption) (*SpeechResponse, error) {
	out := new(SpeechResponse)
	err := c.cc.Invoke(ctx, "/asrt.AsrtGrpcService/Speech", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asrtGrpcServiceClient) Language(ctx context.Context, in *LanguageRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, "/asrt.AsrtGrpcService/Language", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asrtGrpcServiceClient) All(ctx context.Context, in *SpeechRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, "/asrt.AsrtGrpcService/All", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asrtGrpcServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (AsrtGrpcService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AsrtGrpcService_serviceDesc.Streams[0], "/asrt.AsrtGrpcService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &asrtGrpcServiceStreamClient{stream}
	return x, nil
}

type AsrtGrpcService_StreamClient interface {
	Send(*SpeechRequest) error
	Recv() (*TextResponse, error)
	grpc.ClientStream
}

type asrtGrpcServiceStreamClient struct {
	grpc.ClientStream
}

func (x *asrtGrpcServiceStreamClient) Send(m *SpeechRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *asrtGrpcServiceStreamClient) Recv() (*TextResponse, error) {
	m := new(TextResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AsrtGrpcServiceServer is the server API for AsrtGrpcService service.
type AsrtGrpcServiceServer interface {
	Speech(context.Context, *SpeechRequest) (*SpeechResponse, error)
	Language(context.Context, *LanguageRequest) (*TextResponse, error)
	All(context.Context, *SpeechRequest) (*TextResponse, error)
	Stream(AsrtGrpcService_StreamServer) error
}

// UnimplementedAsrtGrpcServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAsrtGrpcServiceServer struct {
}

func (*UnimplementedAsrtGrpcServiceServer) Speech(context.Context, *SpeechRequest) (*SpeechResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Speech not implemented")
}
func (*UnimplementedAsrtGrpcServiceServer) Language(context.Context, *LanguageRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Language not implemented")
}
func (*UnimplementedAsrtGrpcServiceServer) All(context.Context, *SpeechRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method All not implemented")
}
func (*UnimplementedAsrtGrpcServiceServer) Stream(AsrtGrpcService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}

func RegisterAsrtGrpcServiceServer(s *grpc.Server, srv AsrtGrpcServiceServer) {
	s.RegisterService(&_AsrtGrpcService_serviceDesc, srv)
}

func _AsrtGrpcService_Speech_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpeechRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsrtGrpcServiceServer).Speech(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/asrt.AsrtGrpcService/Speech",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsrtGrpcServiceServer).Speech(ctx, req.(*SpeechRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsrtGrpcService_Language_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsrtGrpcServiceServer).Language(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/asrt.AsrtGrpcService/Language",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsrtGrpcServiceServer).Language(ctx, req.(*LanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsrtGrpcService_All_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpeechRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsrtGrpcServiceServer).All(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/asrt.AsrtGrpcService/All",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsrtGrpcServiceServer).All(ctx, req.(*SpeechRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsrtGrpcService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AsrtGrpcServiceServer).Stream(&asrtGrpcServiceStreamServer{stream})
}

type AsrtGrpcService_StreamServer interface {
	Send(*TextResponse) error
	Recv() (*SpeechRequest, error)
	grpc.ServerStream
}

type asrtGrpcServiceStreamServer struct {
	grpc.ServerStream
}

func (x *asrtGrpcServiceStreamServer) Send(m *TextResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *asrtGrpcServiceStreamServer) Recv() (*SpeechRequest, error) {
	m := new(SpeechRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AsrtGrpcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "asrt.AsrtGrpcService",
	HandlerType: (*AsrtGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Speech",
			Handler:    _AsrtGrpcService_Speech_Handler,
		},
		{
			MethodName: "Language",
			Handler:    _AsrtGrpcService_Language_Handler,
		},
		{
			MethodName: "All",
			Handler:    _AsrtGrpcService_All_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _AsrtGrpcService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc/asrt.proto",
}
